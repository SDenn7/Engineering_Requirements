/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author samanthadennison <your.name your.org>
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        // The following are not visible until needed
        timeRangeComboBox.setVisible(false);
        yearTimeRangeComboBox.setVisible(false);
        dayTimeRangeComboBox.setVisible(false);
        timeRangeComboBoxTo.setVisible(false);
        yearTimeRangeComboBoxTo.setVisible(false);
        dayTimeRangeComboBoxTo.setVisible(false);
        statusDayLabel.setVisible(false);
        fromLabel.setVisible(false);
        toLabel.setVisible(false);
        changeTimeRangeLabel.setVisible(false);
        statusHistoryLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        studentIDActivateIDTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        firstNameActivateIDTextField = new javax.swing.JTextField();
        lastNameActivateIDTextField = new javax.swing.JTextField();
        submitActivateIDButton = new javax.swing.JButton();
        statusActivateIDLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        studentIDSuspendIDTextField = new javax.swing.JTextField();
        submitSuspendIDButton = new javax.swing.JButton();
        statusSuspendIDLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        studentIDReactivateIDTextField = new javax.swing.JTextField();
        submitReactivateIDButton = new javax.swing.JButton();
        statusReactivateIDLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        sortByLabel = new javax.swing.JLabel();
        sortByComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        sortHistoryButton = new javax.swing.JButton();
        subSortComboBox = new javax.swing.JComboBox<>();
        statusHistoryLabel = new javax.swing.JLabel();
        timeRangeComboBox = new javax.swing.JComboBox<>();
        dayTimeRangeComboBox = new javax.swing.JComboBox<>();
        yearTimeRangeComboBox = new javax.swing.JComboBox<>();
        statusSelectYearAndMonthLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        timeRangeComboBoxTo = new javax.swing.JComboBox<>();
        dayTimeRangeComboBoxTo = new javax.swing.JComboBox<>();
        yearTimeRangeComboBoxTo = new javax.swing.JComboBox<>();
        statusDayLabel = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        changeTimeRangeLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        studentIDStudentTextField = new javax.swing.JTextField();
        submitStudentButton = new javax.swing.JButton();
        statusStudentLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        titleLabel.setBackground(new java.awt.Color(255, 255, 204));
        titleLabel.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 126, 0));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Student Unix Network (SUN) Lab");

        jTabbedPane1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jTabbedPane2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Student ID:");

        studentIDActivateIDTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("First Name:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Last Name:");

        firstNameActivateIDTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        lastNameActivateIDTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        submitActivateIDButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        submitActivateIDButton.setText("Submit");
        submitActivateIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActivateIDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(submitActivateIDButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(456, 456, 456)
                                .addComponent(statusActivateIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(studentIDActivateIDTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                                    .addComponent(firstNameActivateIDTextField)
                                    .addComponent(lastNameActivateIDTextField))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(studentIDActivateIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(firstNameActivateIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lastNameActivateIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitActivateIDButton)
                .addGap(40, 40, 40)
                .addComponent(statusActivateIDLabel)
                .addContainerGap(262, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Activate ID", jPanel3);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Student ID:");

        studentIDSuspendIDTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        submitSuspendIDButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        submitSuspendIDButton.setText("Submit");
        submitSuspendIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitSuspendIDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(studentIDSuspendIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(submitSuspendIDButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 365, Short.MAX_VALUE)
                .addComponent(statusSuspendIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(studentIDSuspendIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitSuspendIDButton)
                .addGap(18, 18, 18)
                .addComponent(statusSuspendIDLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Suspend ID", jPanel5);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Student ID:");

        studentIDReactivateIDTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        submitReactivateIDButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        submitReactivateIDButton.setText("Submit");
        submitReactivateIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitReactivateIDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(studentIDReactivateIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(statusReactivateIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(submitReactivateIDButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentIDReactivateIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(15, 15, 15)
                .addComponent(submitReactivateIDButton)
                .addGap(18, 18, 18)
                .addComponent(statusReactivateIDLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Reactivate ID", jPanel6);

        sortByLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        sortByLabel.setText("Sort by:");

        sortByComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        sortByComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select One -", "Student ID", "Date", "Time Range" }));
        sortByComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByComboBoxActionPerformed(evt);
            }
        });

        historyTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Student", "Student ID", "Timestamp"
            }
        ));
        jScrollPane1.setViewportView(historyTable);
        if (historyTable.getColumnModel().getColumnCount() > 0) {
            historyTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        sortHistoryButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        sortHistoryButton.setText("Sort");
        sortHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortHistoryButtonActionPerformed(evt);
            }
        });

        subSortComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        subSortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        subSortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subSortComboBoxActionPerformed(evt);
            }
        });

        timeRangeComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dayTimeRangeComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        dayTimeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dayTimeRangeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayTimeRangeComboBoxActionPerformed(evt);
            }
        });

        yearTimeRangeComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        yearTimeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        yearTimeRangeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearTimeRangeComboBoxActionPerformed(evt);
            }
        });

        toLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        toLabel.setText("to: ");

        timeRangeComboBoxTo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        timeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dayTimeRangeComboBoxTo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        dayTimeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dayTimeRangeComboBoxTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayTimeRangeComboBoxToActionPerformed(evt);
            }
        });

        yearTimeRangeComboBoxTo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        yearTimeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        yearTimeRangeComboBoxTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearTimeRangeComboBoxToActionPerformed(evt);
            }
        });

        statusDayLabel.setText("jLabel8");

        fromLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        fromLabel.setText("From: ");

        changeTimeRangeLabel.setText("jLabel7");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(253, 253, 253)
                                .addComponent(statusSelectYearAndMonthLabel)
                                .addGap(0, 1, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(132, 132, 132)
                                    .addComponent(subSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(31, 31, 31)
                                    .addComponent(sortByLabel)
                                    .addGap(39, 39, 39)
                                    .addComponent(sortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fromLabel)
                            .addComponent(toLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(timeRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(dayTimeRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(timeRangeComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dayTimeRangeComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(yearTimeRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearTimeRangeComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(sortHistoryButton)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addComponent(statusHistoryLabel))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(statusDayLabel)))
                                .addGap(8, 8, 8)))))
                .addContainerGap(327, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(changeTimeRangeLabel)
                .addGap(426, 426, 426))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sortByLabel)
                                    .addComponent(sortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sortHistoryButton))
                                .addGap(7, 7, 7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(statusDayLabel)
                                .addGap(21, 21, 21)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dayTimeRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearTimeRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(statusHistoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(fromLabel)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(statusSelectYearAndMonthLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeRangeComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dayTimeRangeComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearTimeRangeComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel))))
                .addGap(18, 18, 18)
                .addComponent(changeTimeRangeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jTabbedPane2.addTab("History", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.addTab("Admin", jPanel1);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Student ID:");

        studentIDStudentTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        submitStudentButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        submitStudentButton.setText("Submit");
        submitStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitStudentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(studentIDStudentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(submitStudentButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(statusStudentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(448, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(studentIDStudentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitStudentButton)
                .addGap(32, 32, 32)
                .addComponent(statusStudentLabel)
                .addContainerGap(381, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Student", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitSuspendIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitSuspendIDButtonActionPerformed
        // TODO add your handling code here:
        statusActivateIDLabel.setVisible(false);
        statusReactivateIDLabel.setVisible(false);
        // Collects information in the text box
        String studentID = studentIDSuspendIDTextField.getText();
        
        // Default is student has an active ID
        boolean activated = true;
        
        // Creates a list of all students
        ArrayList<Student> studentList = StudentsSUNLab.allStudents();
        
        // count is the position of the student object in the array
        int count = 0;
        
        // If studentID is not in the studentList, ID is not activated
        for (Student element: studentList){
            // This finds the id and statusID of each student object
            String id = element.getStudentID();
            String statusID = element.getStatus();
            
            // If the student has an active ID
            if (id.equals(studentID) && ("A".equals(statusID) || ("R".equals(statusID)))){
                // If student is checked into the SUNLab, the student needs a valid ID to exit the Lab,
                // so the status is changed to "Temp", and will be suspended once the student exits the lab
                int sunVisits = 0;
                // Declares status
                String status;
                
                // Checks if a student is in the SUNLab
                ArrayList<SUNLab> sunLabList = SUNLabHistory.allSunLabHistory();
                for (SUNLab sun: sunLabList){
                    String sunID = sun.getStudentID();
                    // Counts the total number of times a studentID appears in SUNLab;
                    if (studentID.equals(sunID)){
                        sunVisits = sunVisits + 1;
                    }
                }
                // Suspend ID if a student is not in the SUNLab, number of visits is even
                if (sunVisits%2 == 0){
                    status = "S";
                }
                // Create "Temp" access if student is in the SUNLab, meaning visits is odd
                else{
                    status = "Temp";
                }
                
                // Stores the student's name
                String firstName = element.getFirstName();
                String lastName = element.getLastName();
                
                // Updates the student object with new status
                StudentsSUNLab.updateStudent(studentList.get(count), status);
                // ID is no longer activated
                activated = false;
                statusSuspendIDLabel.setVisible(true);
                statusSuspendIDLabel.setText(lastName + ", " + firstName + " (" + studentID + ") " +
                        "has been suspended");
                
            }
            
            // If the student is already suspended
            if (id.equals(studentID) && "S".equals(statusID)){
                // ID is not activated
                activated = false;
                statusSuspendIDLabel.setVisible(true);
                statusSuspendIDLabel.setText("Student is already suspended");
            }
            // count increases by 1 until studentID is found or there are no more elements in the array
            count = count + 1;
        }  
        
        // If the student is not found in the SUNLab records
        if (activated == true) {
            statusSuspendIDLabel.setVisible(true);
            statusSuspendIDLabel.setText("Student not found");
        }
        
    studentIDSuspendIDTextField.setText("");        
    }//GEN-LAST:event_submitSuspendIDButtonActionPerformed

    private void submitReactivateIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitReactivateIDButtonActionPerformed
        // TODO add your handling code here:
        statusActivateIDLabel.setVisible(false);
        statusSuspendIDLabel.setVisible(false);
        // Collects information in the text box
        String studentID = studentIDReactivateIDTextField.getText();
        
        // Default is student has an active ID
        boolean activated = false;
        
        // Creates a list of all students
        ArrayList<Student> studentList = StudentsSUNLab.allStudents();
        
        // count is the position of the student object in the array
        int count = 0;
        
        // If studentID is not in the studentList, ID is not suspended
        for (Student element: studentList){
            // This finds the id and statusID of each student object
            String id = element.getStudentID();
            String statusID = element.getStatus();
            // If the student has suspended ID
            if (id.equals(studentID) && "S".equals(statusID)){
                // Status becomes reactivated
                String status = "R";
                
                // Stores the student's name
                String firstName = element.getFirstName();
                String lastName = element.getLastName();
                
                // Updates the student object with new status
                StudentsSUNLab.updateStudent(studentList.get(count), status);
                // ID is reactivated
                activated = true;
                statusReactivateIDLabel.setVisible(true);
                statusReactivateIDLabel.setText(lastName + ", " + firstName + " (" + studentID + ") " +
                        "has been reactivated");
            }
            
            // If student already has an activated account
            if (id.equals(studentID) && ("A".equals(statusID) || "R".equals(statusID))){
                // ID is activated
                activated = true;
                statusReactivateIDLabel.setVisible(true);
                statusReactivateIDLabel.setText("Student already has an activated ID");
            }
            // count increases by 1 until studentID is found or there are no more elements in the array
            count = count + 1;
        
            
        }
        // If the student is not found in the SUNLab records
        if (activated == false) {
            statusReactivateIDLabel.setVisible(true);
            statusReactivateIDLabel.setText("Student not found");
        }
        
    studentIDReactivateIDTextField.setText(""); 
    }//GEN-LAST:event_submitReactivateIDButtonActionPerformed

    private void submitStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitStudentButtonActionPerformed
        // TODO add your handling code here:
        // Collects information in the text box
        String studentID = studentIDStudentTextField.getText();
        // Default is student does not have valid ID 
        boolean activated = false;
        int count = 0;
        // Creates a list of all students
        ArrayList<Student> studentList = StudentsSUNLab.allStudents();
        // If studentID is not in the studentList, ID is not activated
        for (Student element: studentList){
            // This finds the id and statusID of each student object
            String id = element.getStudentID();
            String statusID = element.getStatus();
            
            // If the student has an active ID
            if (id.equals(studentID) && ("A".equals(statusID) || ("R".equals(statusID)) || "Temp".equals(statusID))){
                activated = true;
                // Counts number of times a student enter and leaves the SUNLab
                int sunVisits = 0;
                
                // Creates a list of all SUNLab history
                ArrayList<SUNLab> sunList = SUNLabHistory.allSunLabHistory();
                for (SUNLab sunElement: sunList){
                    String sunID = sunElement.getStudentID();
                    // Counts the total number of times a studentID appears in SUNLab
                    if (studentID.equals(sunID)){
                        sunVisits = sunVisits + 1;
                    }
                }
                // If the visits is odd, the student is leaving the SUNLab
                if (sunVisits%2 == 1){
                    statusStudentLabel.setText("Have a nice day!");
                    if ("Temp".equals(statusID)){
                        // Student's ID is now suspended
                        statusID = "S";
                      
                        // Updates the student object with suspended status
                        StudentsSUNLab.updateStudent(studentList.get(count), statusID);
                    }
                }
                // If the visits is even, the student is entering the SUNLab
                else{
                    statusStudentLabel.setText("Welcome to the SUNLab!");
                }
                // Creates new SUNLab object and adds object to SUNLabHistory table
                SUNLab sun = new SUNLab(studentID, statusID);
                SUNLabHistory.addSunLabHistory(sun);
                
            }
            // count increases by 1 until studentID is found or there are no more elements in the array
            count = count + 1;
        }
        if (activated == false){
            statusStudentLabel.setText("You do not have access to the SUNLab");
        }
        studentIDStudentTextField.setText("");
    }//GEN-LAST:event_submitStudentButtonActionPerformed

    private void sortHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortHistoryButtonActionPerformed
        // TODO add your handling code here:
        String sortBy = String.valueOf(subSortComboBox.getSelectedItem());
        int choicesFilled = 1;
        // Declares an array of SUNLABTime objects
        ArrayList<SUNLabTime> sunList = null;
        
        SUNLabHistory.deleteSunLabHistory();
        
        
        // If "Year" is selected
        if (sortBy.equals("Year")){
            // Gets the year selected
            String year = String.valueOf(timeRangeComboBox.getSelectedItem());
            String yearTo = String.valueOf(timeRangeComboBoxTo.getSelectedItem());
            
            
            if ((year.equals("- Select Year -") || yearTo.equals("- Select Year -"))){
                choicesFilled = 0;
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("All drop-down boxes must have a choice selected");
            }
            else if (Integer.valueOf(year) > Integer.valueOf(yearTo)){
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("The starting time must be prior or equal to the end date");
            }
            
            else{
                changeTimeRangeLabel.setVisible(false);
                // Since no day or month were selected, set values to "None"
                String day = "None";
                String month = "None";
                String dayTo = "None";
                String monthTo = "None";
                // Array for all SunLab history from year selected
                sunList = SUNLabHistory.timeRangeSunLabHistory(day, month, year, dayTo, monthTo, yearTo);
            }
        }
        // If "Month" is selected
        else if (sortBy.equals("Month")){
            // Gets the month and year selected
            String month = String.valueOf(timeRangeComboBox.getSelectedItem());
            String year = String.valueOf(dayTimeRangeComboBox.getSelectedItem());
            String monthTo = String.valueOf(timeRangeComboBoxTo.getSelectedItem());
            String yearTo = String.valueOf(dayTimeRangeComboBoxTo.getSelectedItem());
            if ((year.equals("- Select Year -") || yearTo.equals("- Select Year -"))
                    || (month.equals("- Select Month -") || monthTo.equals("- Select Month -"))){
                choicesFilled = 0;
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("All drop-down boxes must have a choice selected");
            }
            else if (Integer.valueOf(year) > Integer.valueOf(yearTo)){
                    
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("The starting time must be prior or equal to the end date");
            }
            else if ((year.equals(yearTo) && 
                    (Integer.valueOf(month) > Integer.valueOf(monthTo)))) {
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("The starting time must be prior or equal to the end date");
            }
            
            
            else{
                changeTimeRangeLabel.setVisible(false);
                // Since no day was selected, set value to "None"
                String day = "None";
                String dayTo = "None";
                // Array for all SunLab history from month and year selected
                sunList = SUNLabHistory.timeRangeSunLabHistory(day, month, year, dayTo, monthTo, yearTo);
            }
        }
        // If "Day" is selected
        else if (sortBy.equals("Day")){
            // Gets the day, month, and year selected
            String day = String.valueOf(timeRangeComboBox.getSelectedItem());
            String month = String.valueOf(dayTimeRangeComboBox.getSelectedItem());
            String year = String.valueOf(yearTimeRangeComboBox.getSelectedItem());
            String dayTo = String.valueOf(timeRangeComboBoxTo.getSelectedItem());
            String monthTo = String.valueOf(dayTimeRangeComboBoxTo.getSelectedItem());
            String yearTo = String.valueOf(yearTimeRangeComboBoxTo.getSelectedItem());
            if ((year.equals("- Select Year -") || yearTo.equals("- Select Year -"))
                    || (month.equals("- Select Month -") || monthTo.equals("- Select Month -")) 
                    || (day.equals("- Select Day -") || dayTo.equals("- Select Month -"))){
                choicesFilled = 0;
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("All drop-down boxes must have a choice selected");
            }
            else if (Integer.valueOf(year) > Integer.valueOf(yearTo)){
                    
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("The starting time must be prior or equal to the end date");
            }
            else if (((year.equals(yearTo)) && 
                    (Integer.valueOf(month) > Integer.valueOf(monthTo)))) {
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("The starting time must be prior or equal to the end date");

            }
            else if (((year.equals(yearTo)) && 
                    (month.equals(monthTo))) &&
                    (Integer.valueOf(day) > Integer.valueOf(dayTo))) {
                changeTimeRangeLabel.setVisible(true);
                changeTimeRangeLabel.setText("The starting time must be prior or equal to the end date");
            }
            
            else {
                changeTimeRangeLabel.setVisible(false);
                // Array for all SunLab history from day, month, and year selected
                sunList = SUNLabHistory.timeRangeSunLabHistory(day, month, year, dayTo, monthTo, yearTo);
            }
        }
        else{
            changeTimeRangeLabel.setVisible(false);
            // Array for all SunLab history
            sunList = SUNLabHistory.sortedSunLabHistory(sortBy);
        }
        // Array for all students
        ArrayList<Student> students = StudentsSUNLab.allStudents();
        
        // If user clicks "sort" before choosing a sorting order
        if (sortBy.equals("---")){
            statusHistoryLabel.setVisible(true);
            statusHistoryLabel.setText("Please select a sorting order");
            sunList.clear();
            choicesFilled = 0;
        }
        
        if ((sunList != null) && (choicesFilled == 1)){
            
            // Displays the information in the history table
            DefaultTableModel sunLabHistoryTable = (DefaultTableModel) historyTable.getModel();
            sunLabHistoryTable.setNumRows(0);
            Object[] rowData = new Object[3];
            for (SUNLabTime sun: sunList){
                String studentID = sun.getStudentID();
                // Finds the students full name from the student ID
                for (Student student: students){
                    String id = student.getStudentID();
                    if (id.equals(studentID)){
                        String firstName = student.getFirstName();
                        String lastName = student.getLastName();
                        // Student Name column
                        rowData[0] = lastName + ", " + firstName;
                    }
                }
                // Student ID column
                rowData[1] = sun.getStudentID();
                // Timestamp column
                rowData[2] = sun.getTimestamp();
                sunLabHistoryTable.addRow(rowData);
            }
        }
        
        
    }//GEN-LAST:event_sortHistoryButtonActionPerformed

    private void sortByComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByComboBoxActionPerformed
        // TODO add your handling code here:
        String sortBy = String.valueOf(sortByComboBox.getSelectedItem());
        
        // Creates choices for sub sorting choices for Student ID
        if (sortBy.equals("Student ID")){
            statusHistoryLabel.setVisible(false);
            ArrayList<String> studentIDList = new ArrayList<String>();
            studentIDList.add("Ascending");
            studentIDList.add("Descending");
            subSortComboBox.setModel(new javax.swing.DefaultComboBoxModel(studentIDList.toArray()));
            // Time range combo boxes are set to not visible
            timeRangeComboBox.setVisible(false);
            yearTimeRangeComboBox.setVisible(false);
            dayTimeRangeComboBox.setVisible(false);
            timeRangeComboBoxTo.setVisible(false);
            yearTimeRangeComboBoxTo.setVisible(false);
            dayTimeRangeComboBoxTo.setVisible(false);
            statusDayLabel.setText("");
            fromLabel.setVisible(false);
            toLabel.setVisible(false);
        }
        
        // Creates choices for sub sorting choices for Date
        if (sortBy.equals("Date")){
            statusHistoryLabel.setVisible(false);
            ArrayList<String> dateList = new ArrayList<String>();
            dateList.add("Most Recent");
            dateList.add("Oldest");
            subSortComboBox.setModel(new javax.swing.DefaultComboBoxModel(dateList.toArray()));
            // Time range combo boxes are set to not visible
            timeRangeComboBox.setVisible(false);
            yearTimeRangeComboBox.setVisible(false);
            dayTimeRangeComboBox.setVisible(false);
            timeRangeComboBoxTo.setVisible(false);
            yearTimeRangeComboBoxTo.setVisible(false);
            dayTimeRangeComboBoxTo.setVisible(false);
            statusDayLabel.setText("");
            fromLabel.setVisible(false);
            toLabel.setVisible(false);
        }
        
        // Creates choices for sub sorting choices for Time Range
        if (sortBy.equals("Time Range")){
            statusHistoryLabel.setVisible(false);
            ArrayList<String> timeList = new ArrayList<String>();
            timeList.add("---");
            timeList.add("Year");
            timeList.add("Month");
            timeList.add("Day");
            subSortComboBox.setModel(new javax.swing.DefaultComboBoxModel(timeList.toArray()));
        }
        
        // Resets choices
        if (sortBy.equals("- Select One -")){
            ArrayList<String> resetList = new ArrayList<String>();
            resetList.add("---");
            subSortComboBox.setModel(new javax.swing.DefaultComboBoxModel(resetList.toArray()));
        }
    }//GEN-LAST:event_sortByComboBoxActionPerformed

    private void subSortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subSortComboBoxActionPerformed
        // TODO add your handling code here:
        String sortBy = String.valueOf(subSortComboBox.getSelectedItem());
        
        // Store choices for years and months
        ArrayList<String> years = Time.years();
        ArrayList<String> months = Time.months();
        ArrayList<String> yearsTo = Time.years();
        ArrayList<String> monthsTo = Time.months();
        // If Year is selected, only a year combo box appears
        if (sortBy.equals("Year")){
            // Makes the first combo box visible and hides the others
            timeRangeComboBox.setVisible(true);
            dayTimeRangeComboBox.setVisible(false);
            yearTimeRangeComboBox.setVisible(false);
            timeRangeComboBoxTo.setVisible(true);
            dayTimeRangeComboBoxTo.setVisible(false);
            yearTimeRangeComboBoxTo.setVisible(false);
            fromLabel.setVisible(true);
            toLabel.setVisible(true);
            changeTimeRangeLabel.setVisible(false);
            statusDayLabel.setVisible(false);
            statusHistoryLabel.setVisible(false);
            
            // Creates choices for the year combo boxes
            timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(years.toArray()));
            timeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(yearsTo.toArray()));
            statusSelectYearAndMonthLabel.setText("");
        }
        
        // If Month is selected, a month and year combo box appears
        if (sortBy.equals("Month")){
            // Makes the first two combo box visible and hides the other
            timeRangeComboBox.setVisible(true);
            dayTimeRangeComboBox.setVisible(true);
            yearTimeRangeComboBox.setVisible(false);
            timeRangeComboBoxTo.setVisible(true);
            dayTimeRangeComboBoxTo.setVisible(true);
            yearTimeRangeComboBoxTo.setVisible(false);
            fromLabel.setVisible(true);
            toLabel.setVisible(true);
            changeTimeRangeLabel.setVisible(false);
            statusDayLabel.setVisible(false);
            statusHistoryLabel.setVisible(false);
            
            // Creates choices for combo boxes
            timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(months.toArray()));
            dayTimeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(years.toArray()));
            timeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(monthsTo.toArray()));
            dayTimeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(yearsTo.toArray()));
            statusSelectYearAndMonthLabel.setText("");
            
        }
        
        // If Day is selected, a day, month, and year combo box appears
        if (sortBy.equals("Day")){
            // Makes all the combo box visible
            dayTimeRangeComboBox.setVisible(true);
            yearTimeRangeComboBox.setVisible(true);
            dayTimeRangeComboBoxTo.setVisible(true);
            yearTimeRangeComboBoxTo.setVisible(true);
            fromLabel.setVisible(true);
            toLabel.setVisible(true);
            changeTimeRangeLabel.setVisible(false);
            statusHistoryLabel.setVisible(false);
            
            // Creates choices for combo boxes
            dayTimeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(months.toArray()));
            yearTimeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(years.toArray()));
            dayTimeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(monthsTo.toArray()));
            yearTimeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(yearsTo.toArray()));
            
            // Stores value from year and month combo boxes
            String year = String.valueOf(yearTimeRangeComboBox.getSelectedItem());
            String month = String.valueOf(dayTimeRangeComboBox.getSelectedItem());
            String yearTo = String.valueOf(yearTimeRangeComboBoxTo.getSelectedItem());
            String monthTo = String.valueOf(dayTimeRangeComboBoxTo.getSelectedItem());
            
            // Stores choices for days
            ArrayList<String> days = Time.days(year, month);
            ArrayList<String> daysTo = Time.days(yearTo, monthTo);
            // If no choices are selected for month or year
            if (year.equals("- Select Year -") || (month.equals("- Select Month -"))){
                days.clear();
                days.add("- Select Day -");
                timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(days.toArray()));
                statusDayLabel.setVisible(true);
                statusDayLabel.setText("Please select a month and year first");
            }
            if (yearTo.equals("- Select Year -") || (monthTo.equals("- Select Month -"))){
                daysTo.clear();
                daysTo.add("- Select Day -");
                statusDayLabel.setVisible(true);
                statusDayLabel.setText("Please select a month and year first");
            }
            
            // Makes combo box visible and fills in choices
            timeRangeComboBox.setVisible(true);
            timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(days.toArray()));
            timeRangeComboBoxTo.setVisible(true);
            timeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(daysTo.toArray()));
            
        }
    }//GEN-LAST:event_subSortComboBoxActionPerformed

    private void dayTimeRangeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayTimeRangeComboBoxActionPerformed
        // TODO add your handling code here:
        String sortBy = String.valueOf(subSortComboBox.getSelectedItem());
        // Only display days if "Day" is selected
        if (sortBy.equals("Day")){
            String year = String.valueOf(yearTimeRangeComboBox.getSelectedItem());
            String month = String.valueOf(dayTimeRangeComboBox.getSelectedItem());

            ArrayList<String> days = Time.days(year, month);

            if (!year.equals("- Select Year -") || !month.equals("- Select Month -")){
                timeRangeComboBox.setVisible(true);
                timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(days.toArray()));
            }
        
        }
        
    }//GEN-LAST:event_dayTimeRangeComboBoxActionPerformed

    private void yearTimeRangeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearTimeRangeComboBoxActionPerformed
        // TODO add your handling code here:
        
        String year = String.valueOf(yearTimeRangeComboBox.getSelectedItem());
        String month = String.valueOf(dayTimeRangeComboBox.getSelectedItem());

        ArrayList<String> days = Time.days(year, month);

        if (!year.equals("- Select Year -") || !month.equals("- Select Month -")){
            timeRangeComboBox.setVisible(true);
            timeRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(days.toArray()));
        }

    }//GEN-LAST:event_yearTimeRangeComboBoxActionPerformed

    private void submitActivateIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActivateIDButtonActionPerformed
        // TODO add your handling code here:
        statusReactivateIDLabel.setVisible(false);
        statusSuspendIDLabel.setVisible(false);
        // Collects information in the text boxes
        String studentID = studentIDActivateIDTextField.getText();
        String firstName = firstNameActivateIDTextField.getText();
        String lastName = lastNameActivateIDTextField.getText();

        // Default is student does not have activated ID
        boolean activated = false;

        // Creates a list of all students
        ArrayList<Student> studentList = StudentsSUNLab.allStudents();

        // If studentID is not in the studentList, ID is not activated
        for (Student element: studentList){

            // This finds the id and statusID of each student object
            String id = element.getStudentID();
            String statusID = element.getStatus();
            String matchFirstName = element.getFirstName();
            String matchLastName = element.getLastName();

            // If an id matches the inputted studentID and the ID is already activated
            if (id.equals(studentID) && ("A".equals(statusID) || "R".equals(statusID))){
                statusActivateIDLabel.setVisible(true);
                statusActivateIDLabel.setText("The ID for " + studentID + " is already activated for "+
                        matchLastName + ", " + matchFirstName);
                // Changes activated to true
                activated = true;
            }

            // If an id matches the inputted studentID and the ID is suspended
            if (id.equals(studentID) && ("S".equals(statusID) || "Temp".equals(statusID))){
                statusActivateIDLabel.setVisible(true);
                statusActivateIDLabel.setText("The ID for " + studentID + " is suspended for "+
                        matchLastName + ", " + matchFirstName);
                // Changes activated to true
                activated = true;
            }
        }

        // If the student is not already in the list, the ID is activated and the student is added to the table
        if (activated == false){
            // Sets status to activated ("A")
            String status = "A";
            // Creates new student object and adds student to student table
            Student student = new Student(studentID, firstName, lastName, status);
            StudentsSUNLab.addStudent(student);
            statusActivateIDLabel.setVisible(true);
            statusActivateIDLabel.setText("The ID for " + lastName + ", " + firstName
                    + " (" + studentID + ") " + " has been activated");
        }

        // Resets the text boxes
        studentIDActivateIDTextField.setText("");
        firstNameActivateIDTextField.setText("");
        lastNameActivateIDTextField.setText("");

    }//GEN-LAST:event_submitActivateIDButtonActionPerformed

    private void dayTimeRangeComboBoxToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayTimeRangeComboBoxToActionPerformed
        // TODO add your handling code here:
        String sortBy = String.valueOf(subSortComboBox.getSelectedItem());
        // Only display days if "Day" is selected
        if (sortBy.equals("Day")){
            String yearTo = String.valueOf(yearTimeRangeComboBoxTo.getSelectedItem());
            String monthTo = String.valueOf(dayTimeRangeComboBoxTo.getSelectedItem());

            ArrayList<String> daysTo = Time.days(yearTo, monthTo);
            
            if (!yearTo.equals("- Select Year -") || !monthTo.equals("- Select Month -")){
                timeRangeComboBoxTo.setVisible(true);
                timeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(daysTo.toArray()));
            }
        }
    }//GEN-LAST:event_dayTimeRangeComboBoxToActionPerformed

    private void yearTimeRangeComboBoxToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearTimeRangeComboBoxToActionPerformed
        // TODO add your handling code here:

        String yearTo = String.valueOf(yearTimeRangeComboBoxTo.getSelectedItem());
        String monthTo = String.valueOf(dayTimeRangeComboBoxTo.getSelectedItem());

        ArrayList<String> daysTo = Time.days(yearTo, monthTo);

        if (!yearTo.equals("- Select Year -") || !monthTo.equals("- Select Month -")){
            timeRangeComboBoxTo.setVisible(true);
            timeRangeComboBoxTo.setModel(new javax.swing.DefaultComboBoxModel(daysTo.toArray()));
        }
    }//GEN-LAST:event_yearTimeRangeComboBoxToActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel changeTimeRangeLabel;
    private javax.swing.JComboBox<String> dayTimeRangeComboBox;
    private javax.swing.JComboBox<String> dayTimeRangeComboBoxTo;
    private javax.swing.JTextField firstNameActivateIDTextField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField lastNameActivateIDTextField;
    private javax.swing.JComboBox<String> sortByComboBox;
    private javax.swing.JLabel sortByLabel;
    private javax.swing.JButton sortHistoryButton;
    private javax.swing.JLabel statusActivateIDLabel;
    private javax.swing.JLabel statusDayLabel;
    private javax.swing.JLabel statusHistoryLabel;
    private javax.swing.JLabel statusReactivateIDLabel;
    private javax.swing.JLabel statusSelectYearAndMonthLabel;
    private javax.swing.JLabel statusStudentLabel;
    private javax.swing.JLabel statusSuspendIDLabel;
    private javax.swing.JTextField studentIDActivateIDTextField;
    private javax.swing.JTextField studentIDReactivateIDTextField;
    private javax.swing.JTextField studentIDStudentTextField;
    private javax.swing.JTextField studentIDSuspendIDTextField;
    private javax.swing.JComboBox<String> subSortComboBox;
    private javax.swing.JButton submitActivateIDButton;
    private javax.swing.JButton submitReactivateIDButton;
    private javax.swing.JButton submitStudentButton;
    private javax.swing.JButton submitSuspendIDButton;
    private javax.swing.JComboBox<String> timeRangeComboBox;
    private javax.swing.JComboBox<String> timeRangeComboBoxTo;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel toLabel;
    private javax.swing.JComboBox<String> yearTimeRangeComboBox;
    private javax.swing.JComboBox<String> yearTimeRangeComboBoxTo;
    // End of variables declaration//GEN-END:variables
}
